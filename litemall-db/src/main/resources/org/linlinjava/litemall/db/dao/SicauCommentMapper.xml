<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.linlinjava.litemall.db.dao.SicauCommentMapper">
  <resultMap id="BaseResultMap" type="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="from_user_id" jdbcType="INTEGER" property="fromUserId" />
    <result column="to_user_id" jdbcType="INTEGER" property="toUserId" />
    <result column="role" jdbcType="TINYINT" property="role" />
    <result column="rating" jdbcType="TINYINT" property="rating" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="reply" jdbcType="VARCHAR" property="reply" />
    <result column="is_anonymous" jdbcType="BIT" property="isAnonymous" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <result column="tags" jdbcType="LONGVARCHAR" property="tags" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, order_id, from_user_id, to_user_id, `role`, rating, content, reply, is_anonymous, 
    add_time, update_time, deleted
  </sql>
  <sql id="Blob_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    tags
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sicau_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeyWithLogicalDelete" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sicau_comment
    where id = #{id,jdbcType=INTEGER}
      and deleted = 
    <choose>
      <when test="andLogicalDeleted">
        1
      </when>
      <otherwise>
        0
      </otherwise>
    </choose>
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from sicau_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sicau_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sicau_comment (order_id, from_user_id, to_user_id, 
      `role`, rating, content, 
      reply, is_anonymous, add_time, 
      update_time, deleted, tags
      )
    values (#{orderId,jdbcType=INTEGER}, #{fromUserId,jdbcType=INTEGER}, #{toUserId,jdbcType=INTEGER}, 
      #{role,jdbcType=TINYINT}, #{rating,jdbcType=TINYINT}, #{content,jdbcType=VARCHAR}, 
      #{reply,jdbcType=VARCHAR}, #{isAnonymous,jdbcType=BIT}, #{addTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT}, #{tags,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sicau_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        order_id,
      </if>
      <if test="fromUserId != null">
        from_user_id,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="rating != null">
        rating,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="reply != null">
        reply,
      </if>
      <if test="isAnonymous != null">
        is_anonymous,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="tags != null">
        tags,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        #{role,jdbcType=TINYINT},
      </if>
      <if test="rating != null">
        #{rating,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="reply != null">
        #{reply,jdbcType=VARCHAR},
      </if>
      <if test="isAnonymous != null">
        #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="tags != null">
        #{tags,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample" resultType="java.lang.Long">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select count(*) from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.orderId != null">
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.fromUserId != null">
        from_user_id = #{record.fromUserId,jdbcType=INTEGER},
      </if>
      <if test="record.toUserId != null">
        to_user_id = #{record.toUserId,jdbcType=INTEGER},
      </if>
      <if test="record.role != null">
        `role` = #{record.role,jdbcType=TINYINT},
      </if>
      <if test="record.rating != null">
        rating = #{record.rating,jdbcType=TINYINT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.reply != null">
        reply = #{record.reply,jdbcType=VARCHAR},
      </if>
      <if test="record.isAnonymous != null">
        is_anonymous = #{record.isAnonymous,jdbcType=BIT},
      </if>
      <if test="record.addTime != null">
        add_time = #{record.addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.tags != null">
        tags = #{record.tags,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      from_user_id = #{record.fromUserId,jdbcType=INTEGER},
      to_user_id = #{record.toUserId,jdbcType=INTEGER},
      `role` = #{record.role,jdbcType=TINYINT},
      rating = #{record.rating,jdbcType=TINYINT},
      content = #{record.content,jdbcType=VARCHAR},
      reply = #{record.reply,jdbcType=VARCHAR},
      is_anonymous = #{record.isAnonymous,jdbcType=BIT},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      tags = #{record.tags,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    set id = #{record.id,jdbcType=INTEGER},
      order_id = #{record.orderId,jdbcType=INTEGER},
      from_user_id = #{record.fromUserId,jdbcType=INTEGER},
      to_user_id = #{record.toUserId,jdbcType=INTEGER},
      `role` = #{record.role,jdbcType=TINYINT},
      rating = #{record.rating,jdbcType=TINYINT},
      content = #{record.content,jdbcType=VARCHAR},
      reply = #{record.reply,jdbcType=VARCHAR},
      is_anonymous = #{record.isAnonymous,jdbcType=BIT},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        from_user_id = #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        to_user_id = #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=TINYINT},
      </if>
      <if test="rating != null">
        rating = #{rating,jdbcType=TINYINT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="reply != null">
        reply = #{reply,jdbcType=VARCHAR},
      </if>
      <if test="isAnonymous != null">
        is_anonymous = #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="tags != null">
        tags = #{tags,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    set order_id = #{orderId,jdbcType=INTEGER},
      from_user_id = #{fromUserId,jdbcType=INTEGER},
      to_user_id = #{toUserId,jdbcType=INTEGER},
      `role` = #{role,jdbcType=TINYINT},
      rating = #{rating,jdbcType=TINYINT},
      content = #{content,jdbcType=VARCHAR},
      reply = #{reply,jdbcType=VARCHAR},
      is_anonymous = #{isAnonymous,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      tags = #{tags,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment
    set order_id = #{orderId,jdbcType=INTEGER},
      from_user_id = #{fromUserId,jdbcType=INTEGER},
      to_user_id = #{toUserId,jdbcType=INTEGER},
      `role` = #{role,jdbcType=TINYINT},
      rating = #{rating,jdbcType=TINYINT},
      content = #{content,jdbcType=VARCHAR},
      reply = #{reply,jdbcType=VARCHAR},
      is_anonymous = #{isAnonymous,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleWithBLOBs" parameterType="org.linlinjava.litemall.db.domain.SicauCommentExample" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="ResultMapWithBLOBs">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select
    <choose>
      <when test="selective != null and selective.length &gt; 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.aliasedEscapedColumnName}
        </foreach>
      </when>
      <otherwise>
        <include refid="Base_Column_List" />
        ,
        <include refid="Blob_Column_List" />
      </otherwise>
    </choose>
    from sicau_comment
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <update id="logicalDeleteByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment set deleted = 1
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="logicalDeleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update sicau_comment set deleted = 1
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 结果映射 -->
  <resultMap id="BaseResultMap" type="org.linlinjava.litemall.db.domain.SicauComment">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="from_user_id" jdbcType="INTEGER" property="fromUserId" />
    <result column="to_user_id" jdbcType="INTEGER" property="toUserId" />
    <result column="role" jdbcType="TINYINT" property="role" />
    <result column="rating" jdbcType="TINYINT" property="rating" />
    <result column="tags" jdbcType="VARCHAR" property="tags" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="reply" jdbcType="VARCHAR" property="reply" />
    <result column="is_anonymous" jdbcType="BIT" property="isAnonymous" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
  </resultMap>
  
  <!-- 基础列列表 -->
  <sql id="Base_Column_List">
    id, order_id, from_user_id, to_user_id, `role`, rating, tags, content, reply,
    is_anonymous, add_time, update_time, deleted
  </sql>
  
  <!-- 根据主键查询 -->
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sicau_comment
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <!-- 根据订单ID查询评价列表 -->
  <select id="selectByOrderId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sicau_comment
    where order_id = #{orderId,jdbcType=INTEGER}
    and deleted = 0
    order by add_time desc
  </select>
  
  <!-- 根据订单ID和角色查询评价 -->
  <select id="selectByOrderIdAndRole" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sicau_comment
    where order_id = #{orderId,jdbcType=INTEGER}
    and `role` = #{role,jdbcType=TINYINT}
    and deleted = 0
    limit 1
  </select>
  
  <!-- 查询用户收到的评价列表 -->
  <select id="selectReceivedComments" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sicau_comment
    where to_user_id = #{toUserId,jdbcType=INTEGER}
    <if test="isAnonymous != null">
      and is_anonymous = #{isAnonymous,jdbcType=BIT}
    </if>
    and deleted = 0
    order by add_time desc
    limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
  </select>
  
  <!-- 查询用户发出的评价列表 -->
  <select id="selectSentComments" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sicau_comment
    where from_user_id = #{fromUserId,jdbcType=INTEGER}
    and deleted = 0
    order by add_time desc
    limit #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
  </select>
  
  <!-- 统计用户收到的评价数量 -->
  <select id="countReceivedComments" resultType="java.lang.Long">
    select count(*)
    from sicau_comment
    where to_user_id = #{toUserId,jdbcType=INTEGER}
    <if test="isAnonymous != null">
      and is_anonymous = #{isAnonymous,jdbcType=BIT}
    </if>
    and deleted = 0
  </select>
  
  <!-- 统计用户发出的评价数量 -->
  <select id="countSentComments" resultType="java.lang.Long">
    select count(*)
    from sicau_comment
    where from_user_id = #{fromUserId,jdbcType=INTEGER}
    and deleted = 0
  </select>
  
  <!-- 计算用户平均评分 -->
  <select id="calculateAverageRating" resultType="java.lang.Double">
    select round(avg(rating), 1)
    from sicau_comment
    where to_user_id = #{toUserId,jdbcType=INTEGER}
    and deleted = 0
  </select>
  
  <!-- 根据主键删除 -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sicau_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <!-- 插入所有字段 -->
  <insert id="insert" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sicau_comment (id, order_id, from_user_id, 
      to_user_id, `role`, rating, tags, content, reply,
      is_anonymous, add_time, update_time, deleted)
    values (#{id,jdbcType=INTEGER}, #{orderId,jdbcType=INTEGER}, #{fromUserId,jdbcType=INTEGER}, 
      #{toUserId,jdbcType=INTEGER}, #{role,jdbcType=TINYINT}, #{rating,jdbcType=TINYINT}, 
      #{tags,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, #{reply,jdbcType=VARCHAR},
      #{isAnonymous,jdbcType=BIT}, #{addTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{deleted,jdbcType=BIT})
  </insert>
  
  <!-- 插入非空字段 -->
  <insert id="insertSelective" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sicau_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="fromUserId != null">
        from_user_id,
      </if>
      <if test="toUserId != null">
        to_user_id,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="rating != null">
        rating,
      </if>
      <if test="tags != null">
        tags,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="reply != null">
        reply,
      </if>
      <if test="isAnonymous != null">
        is_anonymous,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        #{role,jdbcType=TINYINT},
      </if>
      <if test="rating != null">
        #{rating,jdbcType=TINYINT},
      </if>
      <if test="tags != null">
        #{tags,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="reply != null">
        #{reply,jdbcType=VARCHAR},
      </if>
      <if test="isAnonymous != null">
        #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  
  <!-- 根据主键更新非空字段 -->
  <update id="updateByPrimaryKeySelective" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    update sicau_comment
    <set>
      <if test="orderId != null">
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="fromUserId != null">
        from_user_id = #{fromUserId,jdbcType=INTEGER},
      </if>
      <if test="toUserId != null">
        to_user_id = #{toUserId,jdbcType=INTEGER},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=TINYINT},
      </if>
      <if test="rating != null">
        rating = #{rating,jdbcType=TINYINT},
      </if>
      <if test="tags != null">
        tags = #{tags,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="reply != null">
        reply = #{reply,jdbcType=VARCHAR},
      </if>
      <if test="isAnonymous != null">
        is_anonymous = #{isAnonymous,jdbcType=BIT},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!-- 根据主键更新所有字段 -->
  <update id="updateByPrimaryKey" parameterType="org.linlinjava.litemall.db.domain.SicauComment">
    update sicau_comment
    set order_id = #{orderId,jdbcType=INTEGER},
      from_user_id = #{fromUserId,jdbcType=INTEGER},
      to_user_id = #{toUserId,jdbcType=INTEGER},
      `role` = #{role,jdbcType=TINYINT},
      rating = #{rating,jdbcType=TINYINT},
      tags = #{tags,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      reply = #{reply,jdbcType=VARCHAR},
      is_anonymous = #{isAnonymous,jdbcType=BIT},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
</mapper>